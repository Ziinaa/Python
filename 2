# 튜플과 리스트의 차이
# 튜플 - immutable하다, ()의 형태로 되어있다.
# 리스트 - mutable하다, []의 형태로 되어있다.

#나의 정보 dictionary 만들기

my_info = {
'name' : 'jina',
'btd' : '1105',
'phone' : '3365'
}
print(my_info)

#가족 정보 dictionary 만들기
bf_info = {
'name' : 'hyeon',
'btd' : '1116',
'phone' : '0104'
}

Family = [my_info, bf_info]
print(Family)

#Family변수에 들어있는 list 정보를 csv형태로 출력하기 - 해결X

#PEP 20 알파벳 출현 횟수 - 해결X

pep = '''
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
'''




#list comprehension을 이용하여 리스트 만들기

#1. [1,2,3,4,5,6]
a = [i for i in range(1, 6+1)]
print(a)

#2. [6,5,4,3,2,1]
b = [ 7-i for i in range(1, 6+1)]
print(b)

#3. [[1,2,3],[1,2,3],[1,2,3]]
c = [[i for i in range(1, 3+1)]for _ in range(3)]
print(c)

#4. [[1,2,3], [4,5,6], [7,8,9]]
d = [ [x*3+i for i in range(1, 3+1)]for x in range(3)]
print(d)
